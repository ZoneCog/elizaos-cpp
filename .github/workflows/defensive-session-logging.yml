name: Defensive Session Logging Example

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario for session logging'
        required: false
        default: 'success'
        type: choice
        options:
          - success
          - 404_error
          - network_error
          - server_error

jobs:
  session-logging-demo:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          cd src/model/capi
          npm init -y
          npm install --save-dev @types/node typescript jest @types/jest ts-jest
      
      - name: Compile TypeScript
        run: |
          cd src/model/capi
          npx tsc --init
          npx tsc sessions-client.ts --outDir dist --target es2020 --module commonjs --esModuleInterop
      
      - name: Test defensive session logging
        id: session-test
        continue-on-error: true
        run: |
          cd src/model/capi
          
          # Set test endpoint based on input scenario
          case "${{ github.event.inputs.test_scenario }}" in
            "404_error")
              export SESSION_LOGS_ENDPOINT="https://httpstat.us/404"
              ;;
            "network_error")
              export SESSION_LOGS_ENDPOINT="https://non-existent-domain-12345.com/logs"
              ;;
            "server_error")
              export SESSION_LOGS_ENDPOINT="https://httpstat.us/500"
              ;;
            *)
              export SESSION_LOGS_ENDPOINT="https://httpstat.us/200"
              ;;
          esac
          
          echo "Testing scenario: ${{ github.event.inputs.test_scenario }}"
          echo "Endpoint: $SESSION_LOGS_ENDPOINT"
          
          # Run the session client
          node dist/sessions-client.js
      
      - name: Verify workflow continues after session logging
        run: |
          echo "✅ Workflow continued successfully after session logging attempt"
          echo "This demonstrates that defensive error handling prevents workflow failures"
          echo "Session logging result from previous step: ${{ steps.session-test.outcome }}"
      
      - name: Run unit tests
        run: |
          cd src/model/capi
          
          # Install jest if not already installed
          npm install --save-dev jest @types/jest ts-jest
          
          # Create jest config
          cat > jest.config.js << 'EOF'
          module.exports = {
            preset: 'ts-jest',
            testEnvironment: 'node',
            testMatch: ['**/*.test.ts'],
            collectCoverageFrom: [
              'sessions-client.ts'
            ]
          };
          EOF
          
          # Run tests
          npx jest sessions-client.test.ts --coverage --verbose
      
      - name: Summary
        run: |
          echo "## Session Logging Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Scenario**: ${{ github.event.inputs.test_scenario }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Session Logging Outcome**: ${{ steps.session-test.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Status**: ✅ Completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The defensive error handling successfully prevented workflow failure even when session logging encountered errors." >> $GITHUB_STEP_SUMMARY

  # Example of how to use defensive session logging in actual workflows
  example-workflow-with-defensive-logging:
    runs-on: ubuntu-latest
    needs: session-logging-demo
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Some important workflow step
        run: |
          echo "Performing critical workflow operations..."
          # Simulate some important work
          sleep 2
          echo "Critical work completed successfully"
      
      - name: Upload session logs (with defensive handling)
        continue-on-error: true
        run: |
          # This step will not fail the workflow even if session logging fails
          echo "Attempting to upload session logs..."
          
          # In a real scenario, this might be called by an external action
          # that contains sessions-client.ts with defensive error handling
          
          # Simulate session log upload
          if [ "${{ github.event.inputs.test_scenario }}" = "404_error" ]; then
            echo "Session logging encountered 404 error - continuing gracefully"
            exit 0  # Exit successfully despite the "error"
          else
            echo "Session logs uploaded successfully"
            exit 0
          fi
      
      - name: Verify workflow completes regardless of session logging
        run: |
          echo "✅ Workflow completed all steps successfully"
          echo "This demonstrates robust workflow design that doesn't fail due to optional session logging"